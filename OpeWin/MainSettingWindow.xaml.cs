using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Xml.Serialization;

namespace OpeWin
{
    /// <summary>
    /// MainSettingWindow.xaml の相互作用ロジック
    /// </summary>
    public partial class MainSettingWindow : Window
    {
        DataTable OpeInfoTable;

        public MainSettingWindow()
        {
            InitializeComponent();

            OpeInfoTable = OpeInfoTableManager.Load();

            if (OpeInfoTable == null)
            {
                OpeInfoTable = new DataTable();
                OpeInfoTableManager.GenerateDefaultData(OpeInfoTable);
            }

            dgOpeList.DataContext = OpeInfoTable;
        }

        private void dgOpeList_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            Style style = new Style(typeof(DataGridCell));
            style.Setters.Add(new Setter(TextBlock.TextAlignmentProperty, TextAlignment.Center));
            dgOpeList.Columns[0].CellStyle = style;
            dgOpeList.Columns[3].Visibility = Visibility.Hidden;
            dgOpeList.Columns[4].Visibility = Visibility.Hidden;
        }

        private void dgOpeList_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGridTemplateColumn column = new DataGridTemplateColumn();
            column.Header = "Script";
            column.CellTemplate = this.Resources["dtmpEditScript"] as DataTemplate;
            dgOpeList.Columns.Add(column);
        }

        private void btnEditScript_Click(object sender, RoutedEventArgs e)
        {
            DataGridRow curt_row = VisualTreeUtil.FindParent<DataGridRow>(sender as DependencyObject);

            int idx = int.Parse((dgOpeList.Columns[0].GetCellContent(curt_row) as TextBlock).Text);

            ScriptSettingWindow script_setting_window = new ScriptSettingWindow(OpeInfoTable.Rows[idx]);
            script_setting_window.Owner = this;
            script_setting_window.ShowDialog();
        }

        private void dgOpeList_PreviewKeyDown(object sender, KeyEventArgs e)
        {
            DataRowView selected_item = (DataRowView)dgOpeList.SelectedItem;

            ModifierKeys modifierKeys = Keyboard.Modifiers;
            HotKey hot_key = new HotKey();
            if (hot_key.CanSet(e, modifierKeys))
            {
                hot_key.Set(e, modifierKeys);
            }
            else
            {
                return;
            }

            selected_item.Row["HotKey"] = hot_key.MyToString();
            selected_item.Row["HotKeyObject"] = hot_key;
            e.Handled = true;
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            
            OpeInfoTableManager.Save(OpeInfoTable);
        }
    }

    class VisualTreeUtil
    {
        public static T FindParent<T>(DependencyObject child) where T : DependencyObject
        {
            //get parent item
            DependencyObject parentObject = VisualTreeHelper.GetParent(child);

            //we've reached the end of the tree
            if (parentObject == null) return null;

            //check if the parent matches the type we're looking for
            T parent = parentObject as T;
            if (parent != null)
                return parent;
            else
                return FindParent<T>(parentObject);
        }
    }

    class OpeInfoTableManager
    {
        private const int MAX_NUM_OF_OPE = 9;
        private const string SETTING_FILE_NAME = "OpeWinSettings.xml";
        private const string TABLE_NAME = "OpeWinSettings";

        public static void GenerateDefaultData(DataTable table, int num_of_ope)
        {
            table.Columns.Add("ID");
            table.Columns.Add("Name");
            table.Columns.Add("HotKey");
            table.Columns.Add("HotKeyObject", typeof(HotKey));
            table.Columns.Add("ScriptBody");

            for (int idx = 0; idx < num_of_ope; idx++)
            {
                table.Rows.Add(table.NewRow());
                table.Rows[idx]["ID"] = idx + 1;
                table.Rows[idx]["Name"] = "Ope" + (idx + 1).ToString();
                table.Rows[idx]["HotKey"] = "None";
                table.Rows[idx]["HotKeyObject"] = null;
                table.Rows[idx]["ScriptBody"] = @"Ope:Print(""Hello world!"")";
            }
        }

        public static void GenerateDefaultData(DataTable table)
        {
            GenerateDefaultData(table, MAX_NUM_OF_OPE);
        }

        public static void Save(DataTable table)
        {
            table.TableName = TABLE_NAME;
            SaveDataTableToXML(table, SETTING_FILE_NAME);
        }

        public static void SaveDataTableToXML(DataTable dt, string xmlPath)
        {
            using (FileStream fs
                = new FileStream(xmlPath, FileMode.Create, FileAccess.Write, FileShare.ReadWrite))
            {
                XmlSerializer serializer = new System.Xml.Serialization.XmlSerializer(dt.GetType());
                serializer.Serialize(fs, dt);
            }
        }

        public static DataTable Load()
        {
            DataTable table = null;
            LoadDataTableFromXML(ref table, SETTING_FILE_NAME);

            return table;
        }

        public static void LoadDataTableFromXML(ref DataTable dt, string xmlPath)
        {
            try
            {
                using (FileStream fs = new FileStream(xmlPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(DataTable));
                    dt = (DataTable)serializer.Deserialize(fs);
                }
            }
            catch(Exception e)
            {
                dt = null;
                return;
            }
        }
    }

    [Serializable]
    public class HotKey
    {
        public int __mod_keys;

        public int __key;

        [XmlIgnore]
        public ModifierKeys ModKeys
        {
            get
            {
                return (ModifierKeys)__mod_keys;
            }

            set
            {
                __mod_keys = (int)value;
            }
        }

        [XmlIgnore]
        public Key Key
        {
            get
            {
                return (Key)__key;
            }

            set
            {
                __key = (int)value;
            }
        }

        public bool CanSet(KeyEventArgs key_event_args, ModifierKeys mod_keys)
        {
            if (mod_keys == ModifierKeys.None)
                return false;
            if ((mod_keys & ModifierKeys.Windows) == ModifierKeys.Windows)
                return false;

            Key key = (key_event_args.Key == Key.System ? key_event_args.SystemKey : key_event_args.Key);

            String key_str = key.ToString();

            if (key_str == ""
                || key.ToString().Contains("Ctrl")
                || key.ToString().Contains("Shift")
                || key.ToString().Contains("Alt"))
                return false;

            return true;
        }

        public void Set(KeyEventArgs key_event_args, ModifierKeys mod_keys)
        {
            if (CanSet(key_event_args, mod_keys) == true)
            {
                this.ModKeys = mod_keys;
                this.Key = (key_event_args.Key == Key.System ?
                    key_event_args.SystemKey : key_event_args.Key);
            }
            else
            {
                Exception e = new Exception("Can't set to HotKey.");
            }
        }

        public string MyToString()
        {
            string key_str = "";

            if ((ModKeys & ModifierKeys.Alt) != ModifierKeys.None)
                key_str += "Alt + ";
            if ((ModKeys & ModifierKeys.Control) != ModifierKeys.None)
                key_str += "Ctrl + ";
            if ((ModKeys & ModifierKeys.Shift) != ModifierKeys.None)
                key_str += "Shift + ";

            key_str += (" " + Key.ToString());

            return key_str;
        }
    }
}
